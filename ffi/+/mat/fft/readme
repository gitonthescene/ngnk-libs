time for 
- prepare
- 1000x
  -set random input vector 2x2^15 float64 (same algorithm)
  -compute fft

8.8s  k  (gcc -O3 k.c)  fft.k
2.0s  go                fft.go  (same algorithm/author as k)
0.8s  c  (gcc -O3 )     fft.c   (libfftw3)




algorithm

/prepare fft for length n(powers of 2 only)

fftn:{[n]l:*&|2\\n                 /log2 n (tailcount)
 e:angle[1;-(i:!n)*360.%n]         /roots on the unit circle
                                   /result has 4 parts:
 (2//|2\\i                         /input permutation (bitrev)
  2^/:!l                           /powers 1 2 4 8..
  |&'~!l#2                         /index-table A(below)
  e@|(h/2*)\:!h:n%2)}              /exponentials indexed with table B


/apply fft to input x
/ @[x;i;y] updates x for one of the (log2 n) rows of the index table
/ + and * are complex
/ { .. }/[perm x;..] applies the update for each row of (f 1;f 2;f 3)
fft: {[f;x]
 {[x;p;k;e]@[x;k,j;(x[k]+x[j]*e),x[k]-x[j:k+p]*e]}/[x f 0;f 1;f 2;f 3]}


/each step x is indexed with one row of A
/the corresponding indexes B are computed when needed (j:k+p)
/C and D are the indexes into the exponentials which
/are applied once during the preparation.
/D is not used, as it's on the opposite side of the circle
/instead x[j] is substracted
/
/A:   |&'~!l#2            B:A+p:1 2 4 8
/ 0  2  4  6  8 10 12 14 ; 1  3  5  7  9 11 13 15
/ 0  1  4  5  8  9 12 13 ; 2  3  6  7 10 11 14 15
/ 0  1  2  3  8  9 10 11 ; 4  5  6  7 12 13 14 15
/ 0  1  2  3  4  5  6  7 ; 8  9 10 11 12 13 14 15
/
/C:   |(h/2*)\:!h:n%2     D:C+h:n%2
/ 0  0  0  0  0  0  0  0 ; 8  8  8  8  8  8  8  8
/ 0  4  0  4  0  4  0  4 ; 8 12  8 12  8 12  8 12
/ 0  2  4  6  0  2  4  6 ; 8 10 12 14  8 10 12 14
/ 0  1  2  3  4  5  6  7 ; 8  9 10 11 12 13 14 15
