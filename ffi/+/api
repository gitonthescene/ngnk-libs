// c-api implementation
#define K uint64_t

// create atoms
K Kc(char   x){ return ktye_Kc((int32_t)x);       }
K Ks(char  *x){ return ktye_sc(KC(x, strlen(x))); }
K Ki(int    x){ return ktye_Ki((int32_t)x);       }
K Kf(double x){ return ktye_Kf(x);                }

// create vectors
K KC(char *x, size_t n){
 K r = ktye_mk(18, (int32_t)n);
 if(x)memcpy(_M+(int32_t)r, x, n);
 return r;
}
K KS(char **x, size_t n) {
 K r = ktye_mk(20, (int32_t)n);
 int32_t *m = (int32_t*)(_M+(int32_t)r);
 if(x)for(int32_t i=0;i<n;i++) m[i]=(int32_t)Ks(x[i]);
 return r;
}
K KI(int *x, size_t n){
 K r = ktye_mk(19, (int32_t)n);
 if(x){
  if(sizeof(int)==sizeof(int32_t)) memcpy(_M+(int32_t)r, (char *)x, 4*n);
  else {
   int32_t *m = (int32_t*)(_M+(int32_t)r);
   for(int32_t i=0;i<n;i++) m[i]=x[i];
  }
 }
 return r;
}
K KF(double *x, size_t n){
 K r = ktye_mk(21, (int32_t)n);
 if(x)memcpy(_M+(int32_t)r, (char *)x, 8*n);
 return r;
}
K KL(K *x, size_t n){
 K r = ktye_mk(23, (int32_t)n);
 if(x){
  K *m = (K*)(_M+(int32_t)r);
  for(int32_t i=0;i<n;i++) m[i]=x[i];
 }
 return r;
}


// K to C

char TK(K x){ // 01234567890123456789012345                type
 char *t =      "-icisfF----------ICISFFLDT";
 return t[ktye_tp(x)];
}
size_t NK(K x){ //                                         length
 uint8_t t = (uint8_t)(x>>59);
 if(t==6) return 2;            //zt
 if(t==22)return 2*ktye_nn(x); //Zt
 if(t>23) return 2;            //Dt Tt
 if(t<16) return 1;
 return ktye_nn(x);
}

char   cK(K x){ return  (char)x;                   }
int    iK(K x){ return  (int)(int32_t)x;           }
double fK(K x){ return *(double *)(_M+(int32_t)x); }

void CK(char *r, K x){ memcpy(r, _M+(int32_t)x, ktye_nn(x)); ktye_dx(x); }
void IK(int *r, K x){
 size_t n=(size_t)ktye_nn(x);
 if(sizeof(int)==sizeof(int32_t)) memcpy((char *)r, _M+(int32_t)x, 4*n);
 else {
  int32_t *m=(int32_t *)(_M+(int32_t)x);
  for(int32_t i=0;i<n;i++)r[i]=m[i];
 }
 ktye_dx(x);
}
void FK(double *r, K x){
 size_t n=(size_t)ktye_nn(x);
 memcpy(r, _M+(int32_t)x, 8*n);
 ktye_dx(x);
}
void LK(K *r, K x){
 size_t n=(ktye_tp(x)>23) ? 2 : (size_t)ktye_nn(x);
 K *m=(K*)(_M+(int32_t)x);
 for(int32_t i=0;i<n;i++)r[i]=ktye_rx(m[i]);
 ktye_dx(x);
}

void *dK(K x){ return (void *)(_M+(int32_t)x); } //        data pointer

// eval/call
K K0(K *f, const char *s, K *args, size_t n){
 if((*f==0)||n==0){
  K c = KC(NULL, strlen(s));
  memcpy(dK(c), s, strlen(s));
  *f=ktye_val(c);
 }
 if(n)  return ktye_Cal(ktye_rx(*f), KL(args, n));
 return *f;
}

// assign
void KA(K name, K value){ ktye_dx(ktye_Asn(name, value)); }


// extend (register external function)
void KR(const char *name, void *fp, int arity) {
 size_t n = strlen(name);
 K s = KC(NULL, n);
 memcpy((char *)dK(s), name, n);
 K r = ktye_l2(KC((char *)&fp, 8), ktye_rx(s));
 int32_t *m = (int32_t*)(_M+(int32_t)r);
 m[-3] = (int32_t)arity;
 ktye_dx(ktye_Asn(ktye_sc(s),((K)(int32_t)r)|(((K)xf)<<59)));
}

int64_t native(int64_t x, int64_t y){
 int32_t n=ktye_nn(y);
 printf("native %d\n", n);
 void **p = (void **)(_M+(int32_t)x);
 void *f=*p;
 ktye_rl(y);
 ktye_dx(y);
 K *m=(K*)(_M+(int32_t)y);
 switch(n){
 case 0: return ((K(*)())f)();
 case 1: return ((K(*)(K))f)(m[0]);
 case 2: return ((K(*)(K,K))f)(m[0],m[1]);
 case 3: return ((K(*)(K,K,K))f)(m[0],m[1],m[2]);
 case 4: return ((K(*)(K,K,K,K))f)(m[0],m[1],m[2],m[3]);
 case 5: return ((K(*)(K,K,K,K,K))f)(m[0],m[1],m[2],m[3],m[4]);
 case 6: return ((K(*)(K,K,K,K,K,K))f)(m[0],m[1],m[2],m[3],m[4],m[5]);
 case 7: return ((K(*)(K,K,K,K,K,K,K))f)(m[0],m[1],m[2],m[3],m[4],m[5],m[6]);
 case 8: return ((K(*)(K,K,K,K,K,K,K,K))f)(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7]);
 case 9: return ((K(*)(K,K,K,K,K,K,K,K,K))f)(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8]);
 }
 return KE("limit");
}

// refcount
K      ref(K x){ return ktye_rx(x); }
void unref(K x){        ktye_dx(x); }

// errors
K KE(char *s) { printf("error(c-api): %s\n", s); return 0; } //todo trap

// embed
void kinit(){
 ktye_cinit();
 //_F[98]=ktye_ccall;
 ktye_kinit();
}

int32_t rc(K x) { return *(int32_t*)(_M+(int32_t)x-4); } //debug-only
